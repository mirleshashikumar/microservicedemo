package com.example.department.service;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.example.department.repository.EmployeeRepository;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import services.department.model.CoreException;
import services.department.model.Department;
import services.department.model.Employee;
import services.department.model.EmployeeResponse;
import services.department.model.Organization;

@Service("employeeService")
public class EmployeeService {

	private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeService.class);

	@Autowired
	EmployeeRepository repository;
	
	@Value("{department.url}")
	String departmentUrl;
	
	@Value("{organization.url}")
	String organizationUrl;
	
		
	
	public Employee add(Employee employee) {
		LOGGER.info("Employee add: {}", employee);
		return repository.save(employee);
	}
	
	public Employee findById(Long id) {
		Employee employee=new Employee();
		LOGGER.info("Employee find: id={}", id);
		 Optional<Employee> employeeResponse = repository.findById(id);
		 if(employeeResponse.isPresent()) {
			 employee=employeeResponse.get();
		 }
		 return employee;
	}
	
	public List<Employee> findAll() {
		LOGGER.info("Employee Department");
		List<Employee> employees=repository.findAll();
		for(Employee employee:employees) {
			
		}
		return 
	}
	
	public List<Employee> getDepartmentDetails() {
		RestTemplate restTemplate = new RestTemplate();
	
		ResponseEntity<String> departmentResponse  = restTemplate.getForEntity(departmentUrl + "/1", String.class);
		ObjectMapper mapper = new ObjectMapper();
		try {
			EmployeeResponse	department = mapper.readValue(departmentResponse.getBody(), EmployeeResponse.class);
			
		
			ResponseEntity<String> organizationResponse = restTemplate.getForEntity(organizationUrl + department.getId(), String.class);
			
			Organization	root = mapper.readValue(departmentResponse.getBody(), Organization.class);

			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
		
		
	}
	

	
	public void deleteById(Long id) throws CoreException {
		 Optional<Employee> employeeResponse = repository.findById(id);
		 if(employeeResponse.isPresent()) {
			 repository.deleteById(id);
		 }else {
			 String message="Resource not found";
		 throw new CoreException(message) ;
		 }
		
	}	
	
	public void updateById(Employee employee,Long id) throws CoreException {
		 Optional<Employee> employeeResponse = repository.findById(id);
		 if(employeeResponse.isPresent()) {
			 repository.save(employee);
		 }else {
			 String message="Resource not found";
		 throw new CoreException(message) ;
		 }
		
	}	
}
